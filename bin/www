#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

// ======================================
// https://www.freecodecamp.org/news/create-a-react-frontend-a-node-express-backend-and-connect-them-together-c5798926047c/
var cors = require('cors');
app.use(cors());
// ======================================


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// ================================================================================
var io = require('socket.io').listen(server);
var names = {};

// https://itnext.io/build-a-group-chat-app-in-30-lines-using-node-js-15bfe7a2417b
// https://medium.com/enjoy-life-enjoy-coding/react-%E5%9C%A8-react-%E4%B8%AD%E4%BD%BF%E7%94%A8-websocket-feat-socket-io-%E5%9F%BA%E6%9C%AC%E6%95%99%E5%AD%B8-2e3483ad5c80
// 監聽 Server 連線後的所有事件，並捕捉事件 socket 執行
io.on('connection', function(socket) {
  console.log('client connected!');

  //監聽透過 connection 傳進來的 setName 事件
  socket.on('setName', name => {
    console.log(`setName event received, name: ${name}`)
    if(typeof names[name] === 'undefined') {
 			names[name] = {count: 0};
 			socket.emit('setNameSucceed');
 		} else {
 			names[name].count++;
 			socket.emit('setNameFailed');
 		}
  })

  //監聽透過 connection 傳進來的 sendMessage 事件
  socket.on('sendMessage', message => {
    //回傳 message 給其他所有正在連線中的 Client
    socket.broadcast.emit('messageReceived', message)
  })
});
// ================================================================================

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
